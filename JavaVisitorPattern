/**
A Tree class implementing a rooted tree is provided in the editor. It has the following publicly available methods:
getValue(): Returns the value stored in the node.
getColor(): Returns the color of the node.
getDepth(): Returns the depth of the node. Recall that the depth of a node is the number of edges between the node and the tree's root, so the tree's root has depth  and each descendant node's depth is equal to the depth of its parent node +1.
In this challenge, we treat the internal implementation of the tree as being closed to modification, so we cannot directly modify it; however, as with real-world situations, the implementation is written in such a way that it allows external classes to extend and build upon its functionality. More specifically, it allows objects of the TreeVis class (a Visitor Design Pattern) to visit the tree and traverse the tree structure via the accept method.
There are two parts to this challenge.

Sample Input
5
4 7 2 5 12
0 1 0 0 1
1 2
1 3
3 4
3 5


Sample Output
24
40
15

Locked stub code in the editor tests your three class implementations as follows:
Creates a SumInLeavesVisitor object whose getResult method returns the sum of the leaves in the tree, which is 7+5+12=24. The locked stub code prints the returned value on a new line.
Creates a ProductOfRedNodesVisitor object whose getResult method returns the product of the red nodes, which is  4.2.5=40. The locked stub code prints the returned value on a new line.
Creates a FancyVisitor object whose getResult method returns the absolute difference between the sum of the values of non-leaf nodes at even depth and the sum of the values of green leaf nodes, which is |4-(7+12)| =15. The locked stub code prints the returned value on a new line.
**/

import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.util.ArrayList;
import java.util.Scanner;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
}

class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}

abstract class TreeVis
{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}

class SumInLeavesVisitor extends TreeVis {
   int sum = 0;

    public int getResult() {
        //implement this
        return sum;
    }

    public void visitNode(TreeNode node) {
        //implement this
    }

    public void visitLeaf(TreeLeaf leaf) {
        //implement this
        sum+= leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {
     int productResult=1;
    public int getResult() {
        //implement this
        return productResult;
    }

    public void visitNode(TreeNode node) {
        //implement this
        if(node.getColor()==Color.RED){
            productResult*=node.getValue();

        }
    }

    public void visitLeaf(TreeLeaf leaf) {
        //implement this
        if(leaf.getColor()==Color.RED){
            productResult*=leaf.getValue();

        }

    }
}

class FancyVisitor extends TreeVis {
     int evendepthsum = 0;
    int greenleafsum = 0;

    public int getResult() {
        //implement this
        return Math.abs(evendepthsum - greenleafsum);
    }

    public void visitNode(TreeNode node) {
        if (node.getDepth() % 2 == 0) {
            evendepthsum += node.getValue();
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
        //implement this
        if(leaf.getColor()==Color.GREEN){
            greenleafsum+=leaf.getValue();
        }
    }
}

public class Solution {
  
    private static    HashMap<Integer,HashSet<Integer>> treemap=new HashMap();
    private static   List<Integer> valuesList=new ArrayList<>();
    private   static List<Color> colorsList=new ArrayList<>();
    public static Tree solve() {
        //read the tree from STDIN and return its root as a return value of this function
        Scanner scanner= new Scanner(System.in);
        int totalNodes=scanner.nextInt();
        for(int j=0; j<totalNodes;j++){
            valuesList.add(scanner.nextInt());
        } for(int j=0; j<totalNodes;j++){
            colorsList.add(scanner.nextInt()==0?Color.RED:Color.GREEN);
        }

        //Read edges from input
        //

        for(int j=0;j<totalNodes-1;j++){
            int u= scanner.nextInt();
            int v= scanner.nextInt();
            HashSet<Integer> edgeSet= treemap.get(u);
            if(edgeSet==null){
                edgeSet=  new HashSet<>();
                treemap.put(u,edgeSet);
            }
            edgeSet.add(v);
            HashSet<Integer> verticeSet= treemap.get(v);
            if(verticeSet==null){
                verticeSet=  new HashSet<>();
                treemap.put(v,verticeSet);
            }
            verticeSet.add(u);
        }
        scanner.close();

        /**
         * Handle tree with single node.
         */
        if(totalNodes==1){
            return new TreeLeaf(valuesList.get(0),colorsList.get(0),0);
        }

        /**
         * Create Tree
         */
        TreeNode node=new TreeNode(valuesList.get(0),colorsList.get(0),0);

        addChild(node,1);

        return node;
    }
      private static void addChild(TreeNode parent, Integer parentNum) {
        /* Looping through the child */
         for (Integer treeNum : treemap.get(parentNum)) {
            treemap.get(treeNum).remove(parentNum);
           /* Add child */
            HashSet<Integer> childCount = treemap.get(treeNum);
            boolean childHasChild = (childCount != null && !childCount.isEmpty());
            Tree tree;
            if (childHasChild) {
                    //Tree have some childs
                tree = new TreeNode(valuesList.get(treeNum - 1), colorsList.get(treeNum - 1), parent.getDepth() + 1);
            } else {
                    //Tree doesnt have any child
                tree = new TreeLeaf(valuesList.get(treeNum - 1), colorsList.get(treeNum - 1), parent.getDepth() + 1);
            }
            parent.addChild(tree);

            /* Recurse if last tree created is a node */
            if (tree instanceof TreeNode) {
                addChild((TreeNode) tree, treeNum);
            }
        }
    }

    public static void main(String[] args) {
      	Tree root = solve();
		SumInLeavesVisitor vis1 = new SumInLeavesVisitor();
      	ProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();
      	FancyVisitor vis3 = new FancyVisitor();

      	root.accept(vis1);
      	root.accept(vis2);
      	root.accept(vis3);

      	int res1 = vis1.getResult();
      	int res2 = vis2.getResult();
      	int res3 = vis3.getResult();

      	System.out.println(res1);
     	System.out.println(res2);
    	System.out.println(res3);
	}
}
